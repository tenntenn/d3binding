{
    "project": {
        "name": "d3binding",
        "description": "Data binding library for d3js",
        "version": "0.0.1",
        "logo": "../img/logo.png",
        "url": "https://github.com/tenntenn/d3binding"
    },
    "files": {
        "dist/build.js": {
            "name": "dist/build.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/almond.js": {
            "name": "lib/almond.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/lib/almond.js": {
            "name": "simple-binding.js/lib/almond.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/binding/Binding.js": {
            "name": "simple-binding.js/src/sb/base/binding/Binding.js",
            "modules": {},
            "classes": {
                "sb.base.binding.Binding": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/BindingChain.js": {
            "name": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "modules": {},
            "classes": {
                "sb.base.binding.BindingChain": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/Computed.js": {
            "name": "simple-binding.js/src/sb/base/binding/Computed.js",
            "modules": {},
            "classes": {
                "sb.base.binding.Computed": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/binding/DEFAULT_PROPAGATION_GURDIAN.js": {
            "name": "simple-binding.js/src/sb/base/binding/DEFAULT_PROPAGATION_GURDIAN.js",
            "modules": {},
            "classes": {},
            "fors": {
                "PropagationGuardian": 1
            },
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/NotificationEvent.js": {
            "name": "simple-binding.js/src/sb/base/binding/NotificationEvent.js",
            "modules": {},
            "classes": {
                "sb.base.binding.NotificationEvent": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/Observer.js": {
            "name": "simple-binding.js/src/sb/base/binding/Observer.js",
            "modules": {},
            "classes": {
                "sb.base.binding.Observer": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/Parameter.js": {
            "name": "simple-binding.js/src/sb/base/binding/Parameter.js",
            "modules": {},
            "classes": {
                "sb.base.binding.Parameters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/binding/PropagationGuardian.js": {
            "name": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "modules": {},
            "classes": {
                "sb.base.binding.PropagationGuardian": 1,
                "sb.base.binding.Propagation": 1
            },
            "fors": {
                "Propagation": 1
            },
            "namespaces": {
                "sb.base.binding": 1
            }
        },
        "simple-binding.js/src/sb/base/binding/main.js": {
            "name": "simple-binding.js/src/sb/base/binding/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/observable/ko/Observable.js": {
            "name": "simple-binding.js/src/sb/base/observable/ko/Observable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js": {
            "name": "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js",
            "modules": {},
            "classes": {
                "sb.base.observable.ko.ObservableArray": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.observable.ko": 1
            }
        },
        "simple-binding.js/src/sb/base/observable/ko/main.js": {
            "name": "simple-binding.js/src/sb/base/observable/ko/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/observable/isObservableObject.js": {
            "name": "simple-binding.js/src/sb/base/observable/isObservableObject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/observable/main.js": {
            "name": "simple-binding.js/src/sb/base/observable/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/base/observable/newObservable.js": {
            "name": "simple-binding.js/src/sb/base/observable/newObservable.js",
            "modules": {},
            "classes": {
                "sb.base.observable.Observable": 1
            },
            "fors": {
                "sb.base.observable.Observable": 1
            },
            "namespaces": {
                "sb.base.observable": 1
            }
        },
        "simple-binding.js/src/sb/base/observable/newObservableArray.js": {
            "name": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "modules": {},
            "classes": {
                "sb.base.observable.ObservableArray": 1
            },
            "fors": {},
            "namespaces": {
                "sb.base.observable": 1
            }
        },
        "simple-binding.js/src/sb/base/main.js": {
            "name": "simple-binding.js/src/sb/base/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/util/expandable.js": {
            "name": "simple-binding.js/src/sb/util/expandable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/util/main.js": {
            "name": "simple-binding.js/src/sb/util/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/DEFAULT_OBSERVER.js": {
            "name": "simple-binding.js/src/sb/DEFAULT_OBSERVER.js",
            "modules": {},
            "classes": {},
            "fors": {
                "sb": 1
            },
            "namespaces": {}
        },
        "simple-binding.js/src/sb/binding.js": {
            "name": "simple-binding.js/src/sb/binding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/koObservable.js": {
            "name": "simple-binding.js/src/sb/koObservable.js",
            "modules": {},
            "classes": {},
            "fors": {
                "sb.ko": 1
            },
            "namespaces": {}
        },
        "simple-binding.js/src/sb/koObservableArray.js": {
            "name": "simple-binding.js/src/sb/koObservableArray.js",
            "modules": {},
            "classes": {},
            "fors": {
                "sb.ko": 1
            },
            "namespaces": {}
        },
        "simple-binding.js/src/sb/main.js": {
            "name": "simple-binding.js/src/sb/main.js",
            "modules": {},
            "classes": {
                "sb": 1,
                "sb.ko": 1
            },
            "fors": {},
            "namespaces": {
                "sb": 1
            }
        },
        "simple-binding.js/src/sb/observable.js": {
            "name": "simple-binding.js/src/sb/observable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple-binding.js/src/sb/observableArray.js": {
            "name": "simple-binding.js/src/sb/observableArray.js",
            "modules": {},
            "classes": {},
            "fors": {
                "sb": 1
            },
            "namespaces": {}
        },
        "simple-binding.js/test/target.js": {
            "name": "simple-binding.js/test/target.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "sb.base.binding.Binding": {
            "name": "sb.base.binding.Binding",
            "shortname": "sb.base.binding.Binding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 8,
            "description": "A binding between observables.\nIf an observer which contained of input observables\nnotifies changing own value to the observer \nobserver will notifies values which converted by computed function\nto binded observables which contained of output observables.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "observer",
                    "description": "the observer",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "inputs",
                    "description": "input observables",
                    "type": "sb.base.binding.Parameters"
                },
                {
                    "name": "outputs",
                    "description": "output observables",
                    "type": "sb.base.binding.Parameters"
                },
                {
                    "name": "computed",
                    "description": "computed function",
                    "type": "sb.base.binding.Computed"
                }
            ]
        },
        "sb.base.binding.BindingChain": {
            "name": "sb.base.binding.BindingChain",
            "shortname": "sb.base.binding.BindingChain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 10,
            "description": "A set of bindings which provide binding functions as method chains.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "observer",
                    "description": "",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "observables",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "sb.base.binding.Computed": {
            "name": "sb.base.binding.Computed",
            "shortname": "Computed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/Computed.js",
            "line": 5,
            "type": "function(sb.base.binding.Parameters):sb.base.binding.Parameters"
        },
        "sb.base.binding.PropagationGuardian": {
            "name": "sb.base.binding.PropagationGuardian",
            "shortname": "PropagationGuardian",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "continueCondition",
                    "description": "",
                    "type": "Function():boolean"
                },
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "sb.base.binding.NotificationEvent": {
            "name": "sb.base.binding.NotificationEvent",
            "shortname": "sb.base.binding.NotificationEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/NotificationEvent.js",
            "line": 5,
            "description": "Interface of notificaiton event object."
        },
        "sb.base.binding.Observer": {
            "name": "sb.base.binding.Observer",
            "shortname": "sb.base.binding.Observer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 9,
            "description": "This class observes ObservableObject.",
            "is_constructor": 1,
            "uses": [
                "sb.base.binding.ObservableObject"
            ]
        },
        "sb.base.binding.Parameters": {
            "name": "sb.base.binding.Parameters",
            "shortname": "Parameters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/Parameter.js",
            "line": 6,
            "description": "Interface of inputs or outputs for sb.base.binding.Computed function.",
            "type": "Object"
        },
        "sb.base.binding.Propagation": {
            "name": "sb.base.binding.Propagation",
            "shortname": "Propagation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.binding",
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 42,
            "description": "Test propagation is success with given continueCondition and timeout.",
            "params": [
                {
                    "name": "source",
                    "description": "adjacent source of notify propagation",
                    "type": "sb.base.binding.ObservableObject"
                },
                {
                    "name": "e",
                    "description": "event object.",
                    "type": "sb.base.binding.NotificationEvent"
                }
            ]
        },
        "sb.base.observable.ko.ObservableArray": {
            "name": "sb.base.observable.ko.ObservableArray",
            "shortname": "sb.base.observable.ko.ObservableArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.observable.ko",
            "file": "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js",
            "line": 21,
            "description": "A wraper for ko.observableArray.",
            "type": "sb.base.observable.ko.ObservableArray",
            "extends": "sb.base.observable.ObservableObject"
        },
        "sb.base.observable.ko.sb.base.observable.Observable": {
            "name": "sb.base.observable.ko.sb.base.observable.Observable",
            "shortname": "sb.base.observable.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.observable.ko"
        },
        "sb.base.observable.Observable": {
            "name": "sb.base.observable.Observable",
            "shortname": "sb.base.observable.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.observable",
            "file": "simple-binding.js/src/sb/base/observable/newObservable.js",
            "line": 19,
            "description": "An observable object which can have an internal value.",
            "type": "function(*):*",
            "extends": "{sb.base.observable.ObservableObject}",
            "params": [
                {
                    "name": "v",
                    "description": "it is set for this observable",
                    "type": "*"
                }
            ],
            "return": {
                "description": "set value at this observable",
                "type": "*"
            }
        },
        "sb.base.observable.ObservableArray": {
            "name": "sb.base.observable.ObservableArray",
            "shortname": "sb.base.observable.ObservableArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb.base.observable",
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 25,
            "description": "An array which can be observed.\nIf new element is added or an element deleted,\nsb.base.observable.ObservableArray notify binded other \nsb.base.observable.ObservableObject.",
            "extends": "sb.base.observable.ObservableObject",
            "type": "function():Array",
            "return": {
                "description": "internal array",
                "type": "Array"
            }
        },
        "sb": {
            "name": "sb",
            "shortname": "sb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "simple-binding.js/src/sb/main.js",
            "line": 23,
            "description": "The root module of simple-binding.js."
        },
        "sb.ko": {
            "name": "sb.ko",
            "shortname": "sb.ko",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "sb",
            "file": "simple-binding.js/src/sb/main.js",
            "line": 35,
            "description": "It provides KockoutJS wrappers."
        }
    },
    "classitems": [
        {
            "file": "dist/build.js",
            "line": 1,
            "description": "almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "lib/almond.js",
            "line": 1,
            "description": "almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "lib/almond.js",
            "line": 20,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "lib/almond.js",
            "line": 179,
            "description": "Makes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "lib/almond.js",
            "line": 359,
            "description": "Just drops the config on the floor, but returns req in case\nthe config return value is used.",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "simple-binding.js/lib/almond.js",
            "line": 1,
            "description": "almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "simple-binding.js/lib/almond.js",
            "line": 20,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "simple-binding.js/lib/almond.js",
            "line": 179,
            "description": "Makes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "simple-binding.js/lib/almond.js",
            "line": 359,
            "description": "Just drops the config on the floor, but returns req in case\nthe config return value is used.",
            "class": "sb.base.binding.Binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 25,
            "description": "Own object.",
            "itemtype": "property",
            "name": "that",
            "access": "private",
            "tagname": "",
            "type": "{sb.base.binding.Binding}",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 33,
            "description": "Input observables.",
            "itemtype": "property",
            "name": "inputs",
            "access": "public",
            "tagname": "",
            "type": "{sb.base.binding.Parameters}",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 41,
            "description": "Output observables.",
            "itemtype": "property",
            "name": "outputs",
            "access": "public",
            "tagname": "",
            "type": "{sb.base.binding.Parameters}",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 49,
            "description": "Computed function.",
            "itemtype": "property",
            "name": "computed",
            "access": "public",
            "tagname": "",
            "type": "{sb.base.binding.Computed}",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 57,
            "description": "Enable this binding.",
            "itemtype": "method",
            "name": "bind",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "own object",
                "type": "sb.base.binding.Binding"
            },
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 69,
            "description": "Disable this binding.",
            "itemtype": "method",
            "name": "unbind",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "own object",
                "type": "sb.base.binding.Binding"
            },
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 81,
            "description": "Notify changing to output observables.",
            "itemtype": "method",
            "name": "notify",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.base.binding.Propagation"
                }
            ],
            "return": {
                "description": "own object",
                "type": "sb.base.binding.Binding"
            },
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 91,
            "type": "{sb.base.observable.ObservableObject} source of notification",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 96,
            "type": "{sb.base.binding.NotificationEvent} event object",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 101,
            "type": "{sb.base.binding.Parameters} result of computed",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 106,
            "type": "{Array.<sb.base.observable.ObservableObject>}",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Binding.js",
            "line": 111,
            "type": "{sb.base.observable.ObservableObject} input observable",
            "class": "sb.base.binding.Binding",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 20,
            "description": "Create bindings.",
            "itemtype": "property",
            "name": "bindingsMaker",
            "access": "private",
            "tagname": "",
            "type": "{sb.util.expandable}",
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 28,
            "description": "A set of bindings.",
            "itemtype": "property",
            "name": "bindings",
            "access": "private",
            "tagname": "",
            "type": "{Array}",
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 36,
            "description": "Synchronize observables which are same value each other\nand when an observable changes, others immediately synchronized.",
            "itemtype": "method",
            "name": "synchronize",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "own object",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 91,
            "description": "Add computed binding.",
            "itemtype": "method",
            "name": "computed",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "params": [
                {
                    "name": "observable",
                    "description": "target observable",
                    "type": "sb.base.observable.ObservableObject"
                },
                {
                    "name": "func",
                    "description": "computed function",
                    "type": "sb.base.binding.Computed"
                }
            ],
            "return": {
                "description": "own object",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 136,
            "description": "Add callback which call after changing a given observable value.",
            "itemtype": "method",
            "name": "onChange",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "params": [
                {
                    "name": "observable",
                    "description": "target observable.",
                    "type": "sb.base.observable.ObservableObject"
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "function(sb.base.observable.ObservableObject, sb.base.binding.NotificationEvent)"
                }
            ],
            "return": {
                "description": "own object",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 173,
            "description": "Enable internal all internal bindings.",
            "itemtype": "method",
            "name": "bind",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "own object",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/BindingChain.js",
            "line": 193,
            "description": "Disable internal all internal bindings.",
            "itemtype": "method",
            "name": "unbind",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "return": {
                "description": "own object",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.base.binding.BindingChain",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/DEFAULT_PROPAGATION_GURDIAN.js",
            "line": 8,
            "description": "Default value of sb.base.binding.PropagationGuardian.",
            "itemtype": "property",
            "name": "DEFAULT_PROPAGATION_GURDIA",
            "final": 1,
            "class": "sb.base.binding.PropagationGuardian"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 23,
            "access": "private",
            "tagname": "",
            "type": "Array.<sb.base.binding.Binding>",
            "class": "sb.base.binding.Observer",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 29,
            "description": "Get PropagationGuardian.",
            "itemtype": "method",
            "name": "getPropagationGuardian",
            "return": {
                "description": "PropagationGuardian",
                "type": "sb.base.binding.PropagationGuardian"
            },
            "class": "sb.base.binding.Observer",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 38,
            "description": "Add new binding.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "binding",
                    "description": "",
                    "type": "sb.base.binding.Binding"
                }
            ],
            "class": "sb.base.binding.Observer",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 55,
            "description": "Notify change to binded observables.",
            "itemtype": "method",
            "name": "nofity",
            "params": [
                {
                    "name": "propagation",
                    "description": "",
                    "type": "sb.base.binding.Propagation"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Array<sb.base.binding.Observable>"
                }
            ],
            "class": "sb.base.binding.Observer",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/Observer.js",
            "line": 81,
            "description": "Remove binding from this observer.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "binding",
                    "description": "",
                    "type": "sb.base.binding.Binding"
                }
            ],
            "class": "sb.base.binding.Observer",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 27,
            "itemtype": "method",
            "name": "createPropagation",
            "access": "public",
            "tagname": "",
            "class": "sb.base.binding.PropagationGuardian",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 33,
            "description": "Call Stack of observable.",
            "itemtype": "property",
            "name": "callStack",
            "access": "private",
            "tagname": "",
            "type": "Array",
            "class": "sb.base.binding.Propagation"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 51,
            "description": "Get callStack of this propagation.",
            "itemtype": "method",
            "name": "callStack",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "sb.base.binding.Propagation",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 61,
            "description": "Get source observable.",
            "itemtype": "method",
            "name": "getSource",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "sb.base.binding.ObservableObject"
            },
            "class": "sb.base.binding.Propagation",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/PropagationGuardian.js",
            "line": 71,
            "description": "Get event object.",
            "itemtype": "method",
            "name": "getEventObject",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "sb.base.binding.NotificationEvent"
            },
            "class": "sb.base.binding.Propagation",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/binding/main.js",
            "line": 12,
            "description": "It provides objects which are related to binding.",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/Observable.js",
            "line": 10,
            "description": "Create a wraper for ko.observable.",
            "params": [
                {
                    "name": "observer",
                    "description": "observer of this observable object",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "koObservable",
                    "description": "observable object of KnockoutJS",
                    "type": "ko.observable"
                }
            ],
            "return": {
                "description": "a wraper for ko.observable.",
                "type": "sb.base.observable.ko.Observable"
            },
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/Observable.js",
            "line": 18,
            "description": "A wraper for ko.observable.",
            "typedef": "{sb.base.observable.ko.Observable}",
            "implements": "{sb.base.observable.ObservableObject}",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/Observable.js",
            "line": 25,
            "description": "handling changing of ko.observable value.",
            "type": "{ko.computed}",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/Observable.js",
            "line": 37,
            "description": "handling chaing of observable value.",
            "type": "{sb.base.binding.Binding}",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js",
            "line": 10,
            "description": "Create a wraper for ko.observableArray.",
            "itemtype": "method",
            "name": "sb.base.observable.ko.newKoObservableArray",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "observer",
                    "description": "observer of this observable object",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "koObservableArray",
                    "description": "observableArray object of KnockoutJS",
                    "type": "ko.observableArray"
                }
            ],
            "return": {
                "description": "A wraper for ko.observableArray.",
                "type": "sb.base.observable.ko.ObservableArray"
            },
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.binding"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js",
            "line": 30,
            "description": "Handling changing of ko.observable value.",
            "itemtype": "property",
            "name": "koComputed",
            "access": "private",
            "tagname": "",
            "type": "{ko.computed}",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.observable.ko"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/ObservableArray.js",
            "line": 46,
            "description": "Handling chaing of observable value.",
            "itemtype": "property",
            "name": "b",
            "access": "private",
            "tagname": "",
            "type": "{sb.base.binding.Binding}",
            "class": "sb.base.observable.ko.ObservableArray",
            "namespace": "sb.base.observable.ko"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/ko/main.js",
            "line": 9,
            "description": "It provides wrappers of KnockoutJS.",
            "class": "sb.base.observable.ko.sb.base.observable.Observable",
            "namespace": "sb.base.observable.ko"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/isObservableObject.js",
            "line": 6,
            "description": "Check either obj is sb.ObservableyObject or not.",
            "params": [
                {
                    "name": "tested",
                    "description": "object",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true indicates that obj implements sb.ObservableObject.",
                "type": "Boolean"
            },
            "class": "sb.base.observable.ko.sb.base.observable.Observable",
            "namespace": "sb.base.observable.ko"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/main.js",
            "line": 10,
            "description": "It provides data structures of observables.",
            "class": "sb.base.observable.ko.sb.base.observable.Observable",
            "namespace": "sb.base.observable.ko"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservable.js",
            "line": 7,
            "description": "Create a sb.base.observable.Observable object.",
            "itemtype": "method",
            "name": "sb.base.observable.newObservable",
            "static": 1,
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "observer",
                    "description": "observer of this observable value",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "value",
                    "description": "initial value",
                    "type": "*"
                }
            ],
            "return": {
                "description": "created observable object",
                "type": "sb.base.observable.Observable"
            },
            "class": "sb.base.observable.ko.sb.base.observable.Observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservable.js",
            "line": 43,
            "description": "Notify change registed observer object.",
            "itemtype": "method",
            "name": "notify",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.Propagation"
                },
                {
                    "name": "v",
                    "description": "it is set for this observable",
                    "type": "*"
                }
            ],
            "class": "sb.base.observable.Observable",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservable.js",
            "line": 52,
            "type": "{sb.base.binding.NotificationEvent}",
            "class": "sb.base.observable.Observable",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 8,
            "description": "Create observable array.",
            "itemtype": "method",
            "name": "sb.base.observable.newObservableArray",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "observer",
                    "description": "registed observer",
                    "type": "sb.Observer"
                },
                {
                    "name": "initArray",
                    "description": "initial value of array",
                    "type": "Array.<*>"
                }
            ],
            "return": {
                "description": "created observable array",
                "type": "sb.observable.ObservableArray"
            },
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 41,
            "description": "Notify changing for observer.",
            "itemtype": "method",
            "name": "notify",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.base.binding.Propagation"
                },
                {
                    "name": "e",
                    "description": "event object",
                    "type": "sb.base.binding.NotificationEvent"
                }
            ],
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 54,
            "description": "Get array size which wrapes the internal array length.",
            "itemtype": "method",
            "name": "length",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "array size",
                "type": "Numnber"
            },
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 64,
            "description": "Get value with index i.",
            "itemtype": "method",
            "name": "get",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "i",
                    "description": "index",
                    "type": "Numnber"
                }
            ],
            "return": {
                "description": "value of given index.",
                "type": "Object"
            },
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 75,
            "description": "Set value with index i.\nAnd it notify observer.",
            "itemtype": "method",
            "name": "set",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "i",
                    "description": "index",
                    "type": "Numnber"
                },
                {
                    "name": "v",
                    "description": "value",
                    "type": "Object"
                }
            ],
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 95,
            "description": "Wrapper of Array.push.",
            "itemtype": "method",
            "name": "push",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "element*",
                    "description": "The elements to add to the end of the array.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new length property of the object upon which the method was called.",
                "type": "Number"
            },
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 104,
            "description": "Wrapper of Array.pop.",
            "itemtype": "method",
            "name": "pop",
            "access": "public",
            "tagname": "",
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 111,
            "itemtype": "method",
            "name": "shift",
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/observable/newObservableArray.js",
            "line": 128,
            "description": "Propagation context.",
            "type": "{sb.Propagation}",
            "class": "sb.base.observable.ObservableArray",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/base/main.js",
            "line": 9,
            "description": "It provides base of structures.",
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/expandable.js",
            "line": 9,
            "description": "Create an expandable function \nwhich can expand with other function.\nForexample, let f is expandable function and g is normal function.\nf.expand(g) expand f with g.\nCalling expanded f do the original process of f and then do the g's process.",
            "return": {
                "description": "expandable function",
                "type": "Function(*):*"
            },
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/expandable.js",
            "line": 19,
            "description": "Expandable function.",
            "type": "{function(*):*}",
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/expandable.js",
            "line": 30,
            "description": "Arguments array of this function.",
            "type": "{Array.<*>}",
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/expandable.js",
            "line": 36,
            "description": "Sub functions.",
            "type": "{Array.<function(*):*>}",
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/expandable.js",
            "line": 44,
            "description": "Expand with given function.",
            "params": [
                {
                    "name": "newFunc",
                    "description": "new sub function which is run at last.",
                    "type": "Function(*):*"
                }
            ],
            "class": "sb",
            "namespace": "sb.base.observable"
        },
        {
            "file": "simple-binding.js/src/sb/util/main.js",
            "line": 8,
            "description": "It provides utility functions and data structures.",
            "class": "sb"
        },
        {
            "file": "simple-binding.js/src/sb/DEFAULT_OBSERVER.js",
            "line": 7,
            "description": "default observer.",
            "itemtype": "property",
            "name": "DEFAULT_OBSERVER",
            "access": "private",
            "tagname": "",
            "type": "sb.base.binding.Observer",
            "class": "sb"
        },
        {
            "file": "simple-binding.js/src/sb/binding.js",
            "line": 11,
            "description": "Create default setting binding chain.",
            "return": {
                "description": "default setting binding chain.",
                "type": "sb.base.binding.BindingChain"
            },
            "class": "sb.ko"
        },
        {
            "file": "simple-binding.js/src/sb/koObservable.js",
            "line": 9,
            "description": "Create default setting of sb.base.observable.ko.Observable.",
            "itemtype": "method",
            "name": "observable",
            "params": [
                {
                    "name": "koObservable",
                    "description": "observable object of KnockoutJS",
                    "type": "ko.observable"
                }
            ],
            "return": {
                "description": "default setting of sb.base.observable.ko.Observable",
                "type": "sb.base.observable.ko.Observable"
            },
            "class": "sb.ko"
        },
        {
            "file": "simple-binding.js/src/sb/koObservableArray.js",
            "line": 9,
            "description": "Create default setting of sb.base.observable.ko.ObservableArray.",
            "itemtype": "method",
            "name": "observableArray",
            "params": [
                {
                    "name": "koObservable",
                    "description": "observable object of KnockoutJS",
                    "type": "ko.observable"
                }
            ],
            "return": {
                "description": "default setting of sb.base.observable.ko.Observable",
                "type": "sb.base.observable.ko.Observable"
            },
            "class": "sb.ko"
        },
        {
            "file": "simple-binding.js/src/sb/observable.js",
            "line": 10,
            "description": "Create default setting of sb.base.observable.Observable.",
            "itemtype": "method",
            "name": "observable",
            "params": [
                {
                    "name": "initValue",
                    "description": "initial value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "default setting of sb.base.observable.Observable.",
                "type": "sb.base.observable.Observable"
            },
            "class": "sb",
            "namespace": "sb"
        },
        {
            "file": "simple-binding.js/src/sb/observableArray.js",
            "line": 9,
            "description": "Create default setting of sb.base.observable.ObservableArray.",
            "itemtype": "method",
            "name": "observableArray",
            "params": [
                {
                    "name": "array",
                    "description": "initial value.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "default setting sb.base.observable.ObservableArray.",
                "type": "sb.base.observable.ObservableArray"
            },
            "class": "sb"
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 1,
            "description": "https://github.com/tenntenn/simple-binding.js\n\nCopyright (c) 2012, Takuya Ueda and Yuji Katsumata.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n* Neither the name of the author nor the names of its contributors may be used\n  to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 31,
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 35,
            "description": "It provides utility functions and data structures.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 40,
            "description": "Create an expandable function \nwhich can expand with other function.\nForexample, let f is expandable function and g is normal function.\nf.expand(g) expand f with g.\nCalling expanded f do the original process of f and then do the g's process.",
            "return": {
                "description": "expandable function",
                "type": "Function(*):*"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 51,
            "description": "Expandable function.",
            "type": "{function(*):*}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 62,
            "description": "Arguments array of this function.",
            "type": "{Array.<*>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 68,
            "description": "Sub functions.",
            "type": "{Array.<function(*):*>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 76,
            "description": "Expand with given function.",
            "params": [
                {
                    "name": "newFunc",
                    "description": "new sub function which is run at last.",
                    "type": "Function(*):*"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 97,
            "description": "It provides base of structures.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 102,
            "description": "It provides objects which are related to binding.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 107,
            "description": "Computed function.\nIt is used when notifies changing an observable value\nto other binded observables by using computing notified value at sb.base.binding.Binding.",
            "typedef": "{function(sb.base.binding.Parameters):sb.base.binding.Parameters}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 114,
            "description": "It provide context of propagation and can test availability of propagation.",
            "typedef": "{function(sb.base.binding.ObservableProperty, Object): boolean}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 119,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 138,
            "description": "Call Stack of observable.",
            "type": "{Array.<sb.base.binding.ObservableProperty>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 144,
            "description": "Test propagation is success with given continueCondition and timeout.",
            "type": "{sb.base.binding.Propagation}",
            "params": [
                {
                    "name": "source",
                    "description": "adjacent source of notify propagation",
                    "type": "sb.base.binding.ObservableProperty"
                },
                {
                    "name": "e",
                    "description": "event object.",
                    "type": "sb.base.binding.NotificationEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 167,
            "description": "Counter for number of appearance\nof same observable in callstack.",
            "type": "{number}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 198,
            "description": "Default sb.base.binding.PropagationGuardian.",
            "itemtype": "property",
            "name": "{sb.base.binding.PropagationGuardian}",
            "final": "",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 204,
            "description": "Notification event object.",
            "typedef": "{Object}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 209,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 219,
            "type": "{Array.<sb.base.binding.Binding>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 224,
            "description": "Get sb.base.binding.PropagationGuardian.",
            "return": {
                "description": "",
                "type": "sb.base.binding.PropagationGuardian"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 232,
            "params": [
                {
                    "name": "binding",
                    "description": "",
                    "type": "sb.base.binding.Binding"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 248,
            "params": [
                {
                    "name": "propagation",
                    "description": "",
                    "type": "sb.base.binding.Propagation"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Array<sb.base.binding.Observable>"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 273,
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "sb.base.binding.Binding"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 284,
            "description": "A binding between observables.\nIf an observer which contained of input observables\nnotifies changing own value to the observer \nobserver will notifies values which converted by computed function\nto binded observables which contained of output observables.",
            "params": [
                {
                    "name": "observer",
                    "description": "the observer",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "inputs",
                    "description": "input observables",
                    "type": "sb.base.binding.Parameters"
                },
                {
                    "name": "outputs",
                    "description": "output observables",
                    "type": "sb.base.binding.Parameters"
                },
                {
                    "name": "computed",
                    "description": "computed function",
                    "type": "sb.base.binding.Computed"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 298,
            "type": "{sb.base.binding.Binding} own",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 303,
            "type": "{sb.base.binding.Parameters} input observables",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 308,
            "type": "{sb.base.binding.Parameters} output observables",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 314,
            "description": "Computed function.",
            "type": "{sb.base.binding.Computed}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 320,
            "description": "Enable this binding.",
            "return": {
                "description": "",
                "type": "sb.base.binding.Binding"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 329,
            "description": "Disable this binding.",
            "return": {
                "description": "",
                "type": "sb.base.binding.Binding"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 338,
            "description": "Notify changing to output observables.",
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.base.binding.Propagation"
                }
            ],
            "return": {
                "description": "",
                "type": "sb.base.binding.Binding"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 346,
            "type": "{sb.base.observable.ObservableObject} source of notification",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 351,
            "type": "{sb.base.binding.NotificationEvent} event object",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 356,
            "type": "{sb.base.binding.Parameters} result of computed",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 361,
            "type": "{Array.<sb.base.observable.ObservableObject>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 366,
            "type": "{sb.base.observable.ObservableObject} input observable",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 387,
            "description": "A set of bindings which provide binding functions as method chains.",
            "params": [
                {
                    "name": "observer",
                    "description": "",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "observables",
                    "description": "",
                    "type": "Array.<sb.base.observable.ObservableObject>"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 394,
            "description": "Create bindings.",
            "type": "{sb.util.expandable}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 400,
            "description": "A set of bindings.",
            "type": "{Array.<sb.base.binding.Binding>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 406,
            "description": "Synchronize observables which are same value each other\nand when an observable changes, others immediately synchronized.",
            "return": {
                "description": "own",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 414,
            "description": "Arguments array this function.",
            "type": "{Array.<*>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 420,
            "description": "Observables which are synchronized.",
            "type": "{Array.<sb.base.binding.ObservableObject>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 435,
            "description": "Bindings which are used for synchronize given observables.",
            "type": "{Array.<sb.base.binding.Binding>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 468,
            "description": "Add computed binding.",
            "params": [
                {
                    "name": "observable",
                    "description": "target observable",
                    "type": "sb.base.observable.ObservableObject"
                },
                {
                    "name": "func",
                    "description": "computed function",
                    "type": "sb.base.binding.Computed"
                }
            ],
            "return": {
                "description": "own",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 510,
            "description": "Add callback which call after changing a given observable value.",
            "params": [
                {
                    "name": "observable",
                    "description": "target observable.",
                    "type": "sb.base.observable.ObservableObject"
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "function(sb.base.observable.ObservableObject, sb.base.binding.NotificationEvent):*"
                }
            ],
            "return": {
                "description": "own",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 544,
            "description": "Enable internal all internal bindings.",
            "return": {
                "description": "own",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 561,
            "description": "Disable internal all internal bindings.",
            "return": {
                "description": "own",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 577,
            "description": "It provides data structures of observables.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 582,
            "description": "An interface for observable objects.\nIt is a function and provides followings :\n + notify function as method",
            "interface": "",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 590,
            "description": "Check either obj is sb.ObservableyObject or not.",
            "params": [
                {
                    "name": "tested",
                    "description": "object",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true indicates that obj implements sb.ObservableObject.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 610,
            "description": "An observable object which can have an internal value.",
            "typedef": "{function(*):*}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 617,
            "description": "Create an sb.base.observable.Observable object.",
            "params": [
                {
                    "name": "observer",
                    "description": "observer of this observable value",
                    "type": "sb.Observer"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 625,
            "implements": "{sb.base.observable.ObservableObject}",
            "type": "{sb.base.observable.Observable}",
            "params": [
                {
                    "name": "v",
                    "description": "it is set for this observable",
                    "type": "*"
                }
            ],
            "return": {
                "description": "set value at this observable",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 633,
            "description": "Propagation context.",
            "type": "{sb.Propagation}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 649,
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.Propagation"
                },
                {
                    "name": "v",
                    "description": "it is set for this observable",
                    "type": "*"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 655,
            "type": "{sb.base.binding.NotificationEvent}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 672,
            "description": "An array which can be observed.\nIf new element is added or an element deleted,\nsb.base.observable.ObservableArray notify binded other sb.ObservableObject.",
            "typedef": "{function():Array.<*>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 681,
            "params": [
                {
                    "name": "observer",
                    "description": "",
                    "type": "sb.Observer"
                },
                {
                    "name": "initArray",
                    "description": "",
                    "type": "Array.<*>"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 687,
            "type": "{Array.<*>} internal array",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 695,
            "description": "Get internal array.",
            "return": {
                "description": "internal array",
                "type": "Array.<*>"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 703,
            "description": "Notify changing for observer.",
            "params": [
                {
                    "name": "propagation",
                    "description": "propagation context",
                    "type": "sb.Propagation"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 714,
            "description": "Get array size which wrapes the internal array length.",
            "return": {
                "description": "array size",
                "type": "Numnber"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 722,
            "description": "Get value with index i.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 729,
            "description": "Set value with index i.\nAnd it notify observer.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 735,
            "description": "Propagation context.",
            "type": "{sb.Propagation}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 741,
            "type": "{sb.base.binding.NotificationEvent}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 770,
            "description": "Propagation context.",
            "type": "{sb.Propagation}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 782,
            "description": "A wrapper of Array.push.",
            "return": {
                "description": "length of the array after adding new elements."
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 791,
            "description": "Propagation context.",
            "type": "{sb.Propagation}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 797,
            "type": "{sb.base.binding.NotificationEvent}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 864,
            "description": "It provides wrappers of KnockoutJS.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 871,
            "description": "A wraper for ko.observable.",
            "typedef": "{sb.base.observable.Observable}",
            "implements": "{sb.base.observable.ObservableObject}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 878,
            "params": [
                {
                    "name": "observer",
                    "description": "observer of this observable object",
                    "type": "sb.base.binding.Observer"
                },
                {
                    "name": "koObservable",
                    "description": "observable object of KnockoutJS",
                    "type": "ko.observable"
                }
            ],
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 884,
            "description": "wrapper",
            "type": "{sb.base.observable.Observable}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 890,
            "description": "handling changing of ko.observable value.",
            "type": "{ko.computed}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 902,
            "description": "handling chaing of observable value.",
            "type": "{sb.base.binding.Binding}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 926,
            "itemtype": "property",
            "name": "{sb.base.binding.Observer} default observer.",
            "final": "",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 931,
            "description": "Create default setting binding chain.",
            "return": {
                "description": "default setting binding chain.",
                "type": "sb.base.binding.BindingChain"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 937,
            "type": "{Array.<*>} arguments array of this function.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 942,
            "type": "{Array.<sb.base.observable.ObservableObject>}",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 949,
            "type": "{sb.base.binding.BindingChain} default setting binding chain.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 957,
            "description": "Create default setting of sb.base.observable.Observable.",
            "params": [
                {
                    "name": "initValue",
                    "description": "initial value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "default setting of sb.base.observable.Observable.",
                "type": "sb.base.observable.Observable"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 963,
            "type": "{sb.base.observable.Observable} default setting of sb.base.observable.Observable.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 970,
            "description": "Create default setting of sb.base.observable.ObservableArray.",
            "params": [
                {
                    "name": "array",
                    "description": "initial value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "default setting sb.base.observable.ObservableArray.",
                "type": "sb.base.observable.ObservableArray"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 976,
            "type": "{sb.base.observable.ObservableArray} default setting of sb.base.observable.ObservableArray.",
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 988,
            "description": "Create default setting of sb.base.observable.ko.Observable.",
            "params": [
                {
                    "name": "koObservable",
                    "description": "observable object of KnockoutJS",
                    "type": "ko.observable"
                }
            ],
            "return": {
                "description": "default setting of sb.base.observable.ko.Observable",
                "type": "sb.base.observable.ko.Observable"
            },
            "class": ""
        },
        {
            "file": "simple-binding.js/test/target.js",
            "line": 994,
            "description": "default setting of sb.base.observable.ko.Observable.",
            "type": "{sb.base.observable.ko.Observable}",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/almond.js:20"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " simple-binding.js/lib/almond.js:20"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:18"
        },
        {
            "message": "unknown tag: implements",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:18"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:107"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:114"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:204"
        },
        {
            "message": "unknown tag: interface",
            "line": " simple-binding.js/test/target.js:582"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:610"
        },
        {
            "message": "unknown tag: implements",
            "line": " simple-binding.js/test/target.js:625"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:672"
        },
        {
            "message": "unknown tag: typedef",
            "line": " simple-binding.js/test/target.js:871"
        },
        {
            "message": "unknown tag: implements",
            "line": " simple-binding.js/test/target.js:871"
        },
        {
            "message": "Missing item type\nalmond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "line": " dist/build.js:1"
        },
        {
            "message": "Missing item type\nalmond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "line": " lib/almond.js:1"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " lib/almond.js:20"
        },
        {
            "message": "Missing item type\nMakes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "line": " lib/almond.js:179"
        },
        {
            "message": "Missing item type\nJust drops the config on the floor, but returns req in case\nthe config return value is used.",
            "line": " lib/almond.js:359"
        },
        {
            "message": "Missing item type\nalmond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "line": " simple-binding.js/lib/almond.js:1"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " simple-binding.js/lib/almond.js:20"
        },
        {
            "message": "Missing item type\nMakes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "line": " simple-binding.js/lib/almond.js:179"
        },
        {
            "message": "Missing item type\nJust drops the config on the floor, but returns req in case\nthe config return value is used.",
            "line": " simple-binding.js/lib/almond.js:359"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Binding.js:91"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Binding.js:96"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Binding.js:101"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Binding.js:106"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Binding.js:111"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/binding/Observer.js:23"
        },
        {
            "message": "Missing item type\nIt provides objects which are related to binding.",
            "line": " simple-binding.js/src/sb/base/binding/main.js:12"
        },
        {
            "message": "Missing item type\nCreate a wraper for ko.observable.",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:10"
        },
        {
            "message": "Missing item type\nA wraper for ko.observable.",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:18"
        },
        {
            "message": "Missing item type\nhandling changing of ko.observable value.",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:25"
        },
        {
            "message": "Missing item type\nhandling chaing of observable value.",
            "line": " simple-binding.js/src/sb/base/observable/ko/Observable.js:37"
        },
        {
            "message": "Missing item type\nIt provides wrappers of KnockoutJS.",
            "line": " simple-binding.js/src/sb/base/observable/ko/main.js:9"
        },
        {
            "message": "Missing item type\nCheck either obj is sb.ObservableyObject or not.",
            "line": " simple-binding.js/src/sb/base/observable/isObservableObject.js:6"
        },
        {
            "message": "Missing item type\nIt provides data structures of observables.",
            "line": " simple-binding.js/src/sb/base/observable/main.js:10"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/src/sb/base/observable/newObservable.js:52"
        },
        {
            "message": "Missing item type\nPropagation context.",
            "line": " simple-binding.js/src/sb/base/observable/newObservableArray.js:128"
        },
        {
            "message": "Missing item type\nIt provides base of structures.",
            "line": " simple-binding.js/src/sb/base/main.js:9"
        },
        {
            "message": "Missing item type\nCreate an expandable function \nwhich can expand with other function.\nForexample, let f is expandable function and g is normal function.\nf.expand(g) expand f with g.\nCalling expanded f do the original process of f and then do the g's process.",
            "line": " simple-binding.js/src/sb/util/expandable.js:9"
        },
        {
            "message": "Missing item type\nExpandable function.",
            "line": " simple-binding.js/src/sb/util/expandable.js:19"
        },
        {
            "message": "Missing item type\nArguments array of this function.",
            "line": " simple-binding.js/src/sb/util/expandable.js:30"
        },
        {
            "message": "Missing item type\nSub functions.",
            "line": " simple-binding.js/src/sb/util/expandable.js:36"
        },
        {
            "message": "Missing item type\nExpand with given function.",
            "line": " simple-binding.js/src/sb/util/expandable.js:44"
        },
        {
            "message": "Missing item type\nIt provides utility functions and data structures.",
            "line": " simple-binding.js/src/sb/util/main.js:8"
        },
        {
            "message": "Missing item type\nCreate default setting binding chain.",
            "line": " simple-binding.js/src/sb/binding.js:11"
        },
        {
            "message": "Missing item type\nhttps://github.com/tenntenn/simple-binding.js\n\nCopyright (c) 2012, Takuya Ueda and Yuji Katsumata.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n* Neither the name of the author nor the names of its contributors may be used\n  to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "line": " simple-binding.js/test/target.js:1"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:31"
        },
        {
            "message": "Missing item type\nIt provides utility functions and data structures.",
            "line": " simple-binding.js/test/target.js:35"
        },
        {
            "message": "Missing item type\nCreate an expandable function \nwhich can expand with other function.\nForexample, let f is expandable function and g is normal function.\nf.expand(g) expand f with g.\nCalling expanded f do the original process of f and then do the g's process.",
            "line": " simple-binding.js/test/target.js:40"
        },
        {
            "message": "Missing item type\nExpandable function.",
            "line": " simple-binding.js/test/target.js:51"
        },
        {
            "message": "Missing item type\nArguments array of this function.",
            "line": " simple-binding.js/test/target.js:62"
        },
        {
            "message": "Missing item type\nSub functions.",
            "line": " simple-binding.js/test/target.js:68"
        },
        {
            "message": "Missing item type\nExpand with given function.",
            "line": " simple-binding.js/test/target.js:76"
        },
        {
            "message": "Missing item type\nIt provides base of structures.",
            "line": " simple-binding.js/test/target.js:97"
        },
        {
            "message": "Missing item type\nIt provides objects which are related to binding.",
            "line": " simple-binding.js/test/target.js:102"
        },
        {
            "message": "Missing item type\nComputed function.\nIt is used when notifies changing an observable value\nto other binded observables by using computing notified value at sb.base.binding.Binding.",
            "line": " simple-binding.js/test/target.js:107"
        },
        {
            "message": "Missing item type\nIt provide context of propagation and can test availability of propagation.",
            "line": " simple-binding.js/test/target.js:114"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:119"
        },
        {
            "message": "Missing item type\nCall Stack of observable.",
            "line": " simple-binding.js/test/target.js:138"
        },
        {
            "message": "Missing item type\nTest propagation is success with given continueCondition and timeout.",
            "line": " simple-binding.js/test/target.js:144"
        },
        {
            "message": "Missing item type\nCounter for number of appearance\nof same observable in callstack.",
            "line": " simple-binding.js/test/target.js:167"
        },
        {
            "message": "Missing item type\nNotification event object.",
            "line": " simple-binding.js/test/target.js:204"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:209"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:219"
        },
        {
            "message": "Missing item type\nGet sb.base.binding.PropagationGuardian.",
            "line": " simple-binding.js/test/target.js:224"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:232"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:248"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:273"
        },
        {
            "message": "Missing item type\nA binding between observables.\nIf an observer which contained of input observables\nnotifies changing own value to the observer \nobserver will notifies values which converted by computed function\nto binded observables which contained of output observables.",
            "line": " simple-binding.js/test/target.js:284"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:298"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:303"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:308"
        },
        {
            "message": "Missing item type\nComputed function.",
            "line": " simple-binding.js/test/target.js:314"
        },
        {
            "message": "Missing item type\nEnable this binding.",
            "line": " simple-binding.js/test/target.js:320"
        },
        {
            "message": "Missing item type\nDisable this binding.",
            "line": " simple-binding.js/test/target.js:329"
        },
        {
            "message": "Missing item type\nNotify changing to output observables.",
            "line": " simple-binding.js/test/target.js:338"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:346"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:351"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:356"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:361"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:366"
        },
        {
            "message": "Missing item type\nA set of bindings which provide binding functions as method chains.",
            "line": " simple-binding.js/test/target.js:387"
        },
        {
            "message": "Missing item type\nCreate bindings.",
            "line": " simple-binding.js/test/target.js:394"
        },
        {
            "message": "Missing item type\nA set of bindings.",
            "line": " simple-binding.js/test/target.js:400"
        },
        {
            "message": "Missing item type\nSynchronize observables which are same value each other\nand when an observable changes, others immediately synchronized.",
            "line": " simple-binding.js/test/target.js:406"
        },
        {
            "message": "Missing item type\nArguments array this function.",
            "line": " simple-binding.js/test/target.js:414"
        },
        {
            "message": "Missing item type\nObservables which are synchronized.",
            "line": " simple-binding.js/test/target.js:420"
        },
        {
            "message": "Missing item type\nBindings which are used for synchronize given observables.",
            "line": " simple-binding.js/test/target.js:435"
        },
        {
            "message": "Missing item type\nAdd computed binding.",
            "line": " simple-binding.js/test/target.js:468"
        },
        {
            "message": "Missing item type\nAdd callback which call after changing a given observable value.",
            "line": " simple-binding.js/test/target.js:510"
        },
        {
            "message": "Missing item type\nEnable internal all internal bindings.",
            "line": " simple-binding.js/test/target.js:544"
        },
        {
            "message": "Missing item type\nDisable internal all internal bindings.",
            "line": " simple-binding.js/test/target.js:561"
        },
        {
            "message": "Missing item type\nIt provides data structures of observables.",
            "line": " simple-binding.js/test/target.js:577"
        },
        {
            "message": "Missing item type\nAn interface for observable objects.\nIt is a function and provides followings :\n + notify function as method",
            "line": " simple-binding.js/test/target.js:582"
        },
        {
            "message": "Missing item type\nCheck either obj is sb.ObservableyObject or not.",
            "line": " simple-binding.js/test/target.js:590"
        },
        {
            "message": "Missing item type\nAn observable object which can have an internal value.",
            "line": " simple-binding.js/test/target.js:610"
        },
        {
            "message": "Missing item type\nCreate an sb.base.observable.Observable object.",
            "line": " simple-binding.js/test/target.js:617"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:625"
        },
        {
            "message": "Missing item type\nPropagation context.",
            "line": " simple-binding.js/test/target.js:633"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:649"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:655"
        },
        {
            "message": "Missing item type\nAn array which can be observed.\nIf new element is added or an element deleted,\nsb.base.observable.ObservableArray notify binded other sb.ObservableObject.",
            "line": " simple-binding.js/test/target.js:672"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:681"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:687"
        },
        {
            "message": "Missing item type\nGet internal array.",
            "line": " simple-binding.js/test/target.js:695"
        },
        {
            "message": "Missing item type\nNotify changing for observer.",
            "line": " simple-binding.js/test/target.js:703"
        },
        {
            "message": "Missing item type\nGet array size which wrapes the internal array length.",
            "line": " simple-binding.js/test/target.js:714"
        },
        {
            "message": "Missing item type\nGet value with index i.",
            "line": " simple-binding.js/test/target.js:722"
        },
        {
            "message": "Missing item type\nSet value with index i.\nAnd it notify observer.",
            "line": " simple-binding.js/test/target.js:729"
        },
        {
            "message": "Missing item type\nPropagation context.",
            "line": " simple-binding.js/test/target.js:735"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:741"
        },
        {
            "message": "Missing item type\nPropagation context.",
            "line": " simple-binding.js/test/target.js:770"
        },
        {
            "message": "Missing item type\nA wrapper of Array.push.",
            "line": " simple-binding.js/test/target.js:782"
        },
        {
            "message": "Missing item type\nPropagation context.",
            "line": " simple-binding.js/test/target.js:791"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:797"
        },
        {
            "message": "Missing item type\nIt provides wrappers of KnockoutJS.",
            "line": " simple-binding.js/test/target.js:864"
        },
        {
            "message": "Missing item type\nA wraper for ko.observable.",
            "line": " simple-binding.js/test/target.js:871"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:878"
        },
        {
            "message": "Missing item type\nwrapper",
            "line": " simple-binding.js/test/target.js:884"
        },
        {
            "message": "Missing item type\nhandling changing of ko.observable value.",
            "line": " simple-binding.js/test/target.js:890"
        },
        {
            "message": "Missing item type\nhandling chaing of observable value.",
            "line": " simple-binding.js/test/target.js:902"
        },
        {
            "message": "Missing item type\nCreate default setting binding chain.",
            "line": " simple-binding.js/test/target.js:931"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:937"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:942"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:949"
        },
        {
            "message": "Missing item type\nCreate default setting of sb.base.observable.Observable.",
            "line": " simple-binding.js/test/target.js:957"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:963"
        },
        {
            "message": "Missing item type\nCreate default setting of sb.base.observable.ObservableArray.",
            "line": " simple-binding.js/test/target.js:970"
        },
        {
            "message": "Missing item type",
            "line": " simple-binding.js/test/target.js:976"
        },
        {
            "message": "Missing item type\nCreate default setting of sb.base.observable.ko.Observable.",
            "line": " simple-binding.js/test/target.js:988"
        },
        {
            "message": "Missing item type\ndefault setting of sb.base.observable.ko.Observable.",
            "line": " simple-binding.js/test/target.js:994"
        }
    ]
}